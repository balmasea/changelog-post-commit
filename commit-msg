#!/usr/bin/python3

from datetime import datetime, timedelta
import sys
import re
import os

# Changelog constants
HEADER = "# Changelog"
HEADER_SIZE = 1

# Script constants
CHANGELOG_FILE = "CHANGELOG.md"
WEDNESDAY = 2
WEEK_NUMBER_OF_DAYS = 7
ESCAPE_STRING = ":fix:"
JIRA_LINK = "https://jira.intranet.roche.com/jira/browse/"
TASK_PREFIX = "GNAP-"
CHANGELOG_SUBTITLE = r"(?P<type_of_change>:[A-Z]+:)"
GNAP_REGEX = r"(?P<jira_task>%s\d+)" % TASK_PREFIX


class Group:
    """Handle every group included in changelog."""

    def __init__(self, title):
        self.__title = title
        self.__lines = ""

    def has_content(self):
        return self.__lines != ""

    def add_line(self, line):
        line = line.replace("* ", "")
        self.__lines += f"* {line.strip()}"

    def title_matches(self, title):
        return title.upper() in self.__title.upper()

    def __str__(self):
        content = ""
        line_init = "^\*\s+"
        if self.has_content() is True:
            content += f"{self.__title}\n\n"
            for line in self.__lines:
                content += re.sub(line_init, "* ", f"{line}")
            content += "\n"
        return content


class Version:
    """Handle every version included in changelog."""

    def __init__(self, version_title):
        self.__version_title = version_title
        self.__groups = []

    def add_commit_line(self, line):
        group_title_pattern = r"(?P<type_of_change>:[A-Z]+:)"
        m = re.search(group_title_pattern, line)
        line = re.sub(group_title_pattern, "", line).lstrip()
        try:
            title = m.group("type_of_change").replace(":", "")
            group = self.find_group(title)
            group.add_line(line)
        except AttributeError:
            print("Syntax is not correct for the commit. Rejected!")
            exit(-1)

    def set_line(self, line):
        group_title_pattern = r"(?P<type_of_change>### \w+)"
        m = re.search(group_title_pattern, line)
        try:
            title = m.group("type_of_change")
            self.__groups.append(Group(title))
        except AttributeError:
            self.__groups[-1].add_line(line)

    def version_title_matches(self, version_title):
        return version_title in self.__version_title

    def find_group(self, title):
        try:
            iterator = filter(lambda group: group.title_matches(title) is True, self.__groups)
            return next(iterator)
        except StopIteration:
            self.__groups.append(Group(f"### {title.capitalize()}"))
            return self.__groups[-1]

    def __str__(self):
        content = f"{self.__version_title}\n"
        for group in self.__groups:
            content += f"{group}"
        content += "\n"
        return content


class Changelog:
    """Handle all the changelog file"""

    def __init__(self):
        self.__versions = []

    def push_version(self, version):
        self.__versions.insert(0, version)

    def add_version(self, version):
        self.__versions.append(version)

    def update_version(self, version, index):
        self.__versions[index] = version

    def analyze_changelog_file(self, changelog_path):
        try:
            with open(changelog_path, "r") as cl:
                changelog_lines = cl.readlines()
        except FileNotFoundError:
            changelog_lines = [HEADER]
        iterator = filter(lambda line: line != "\n", changelog_lines)
        changelog_lines = list(iterator)
        version_pattern = r"## v(\d+\.\d+\.\d+)"
        current_version = None
        for line in changelog_lines[HEADER_SIZE:]:
            m = re.search(version_pattern, line)
            if m:
                if current_version:
                    self.add_version(current_version)
                current_version = Version(line)
            else:
                current_version.set_line(line)
        if current_version:
            self.add_version(current_version)

    def add_line_in_version(self, release_line, line):
        iterator_index = (i for i, version in enumerate(self.__versions) if version.version_title_matches(release_line))
        try:
            index = next(iterator_index)
            version = self.__versions[index]
            version.add_commit_line(line)
            self.update_version(version, index)
        except StopIteration:
            version = Version(release_line)
            version.add_commit_line(line)
            self.push_version(version)

    def __str__(self):
        content = f"{HEADER}\n\n"
        for version in self.__versions:
            content += version.__str__()
        return content


def get_commit_file():
    commitMessageFile = open(sys.argv[1])
    return commitMessageFile.read().strip()


def get_commit_line(commit_msg):
    lines = commit_msg.split("\n")
    fix = [line for line in lines if line.startswith(ESCAPE_STRING)]
    return fix[0]


def get_jira_task(commit_line):
    m = re.search(GNAP_REGEX, commit_line)
    try:
        jira_task = m.group("jira_task")
        return f"[{jira_task}]({JIRA_LINK}{jira_task})"
    except AttributeError:
        return ""


def get_changelines(commit_msg):
    commit_line = get_commit_line(commit_msg)
    commit_line = commit_line.replace(ESCAPE_STRING, "").lstrip()
    jira_task = get_jira_task(commit_line)
    commit_line = re.sub(GNAP_REGEX, "", commit_line).lstrip()
    return f"* {jira_task}{commit_line}"


def get_next_release_date(todays_date=None):
    if todays_date is None:
        todays_date = datetime.today()
    diff = (WEDNESDAY - todays_date.weekday()) % WEEK_NUMBER_OF_DAYS
    wanted_date = todays_date + timedelta(days=diff)
    return f"{wanted_date:%B} {wanted_date.day} {wanted_date:%Y}"


def get_latest_release_version(changelog_lines, next_release_date):
    version_regex = r"## v(?P<first_digit>\d+)\.(?P<second_digit>\d+)\.(?P<third_digit>\d+)"
    m = re.search(version_regex, changelog_lines)
    try:
        second_digit = int(m.group('second_digit')) + 1 if next_release_date not in changelog_lines else m.group('second_digit')
        return f"## v{m.group('first_digit')}.{second_digit}.{m.group('third_digit')} ({next_release_date})"
    except AttributeError:
        return f"## v0.1.0 ({next_release_date})"


def dump_to_changelog_file(content):
    with open(CHANGELOG_FILE, "w") as cl:
        cl.write(content.__str__())


def clean_msg(commit_msg):
    commit_line = get_commit_line(commit_msg)
    commit_line = commit_line.replace(ESCAPE_STRING, "")
    commit_line = re.sub(CHANGELOG_SUBTITLE, "", commit_line).lstrip()
    commit_line = re.sub(GNAP_REGEX, "", commit_line).lstrip()
    return commit_line


def main():
    commit_msg = get_commit_file()
    if commit_msg.startswith(ESCAPE_STRING) is True:
        changelog = Changelog()
        changelog.analyze_changelog_file(CHANGELOG_FILE)
        if clean_msg(commit_msg) in changelog.__str__():
            print("Already commited")
            exit(0)
        next_release_date = get_next_release_date()
        latest_release_version = get_latest_release_version(changelog.__str__(), next_release_date)
        changelog.add_line_in_version(latest_release_version, get_changelines(commit_msg))
        dump_to_changelog_file(changelog)
        os.system(f"git add {CHANGELOG_FILE}")
        os.system(f"git commit --amend -m \"{commit_msg}\"")


if __name__ == "__main__":
    main()
